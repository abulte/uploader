server {
  listen                *:80;
  server_name           localhost;

  client_max_body_size 8000M;
  client_body_buffer_size 8000M;
  client_body_timeout 120;

  add_header Access-Control-Allow-Origin *;
  add_header 'Access-Control-Allow-Credentials' 'true';
  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
  add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

  location /files {
    autoindex on;
    alias /var/www/files;
  }

#  location / {
#    include /etc/nginx/uwsgi_params.par;
#    uwsgi_pass uwsgi:3031;
#    uwsgi_max_temp_file_size 10024m;
#  }

  # Pass altered request body to a backend
  location @test {
    proxy_pass http://web:5000;
  }

  # Upload form should be submitted to this location
  location /upload {

        # After upload, pass altered request body to this django view
        #upload_pass   /complete/;
        upload_pass   @test;

        # Store files to this directory
        upload_store /var/www/_files;
        upload_store_access user:rw group:rw all:rw;

        upload_resumable on;

        # Set specified fields in request body
        upload_set_form_field $upload_field_name.name "$upload_file_name";
        upload_set_form_field $upload_field_name.content_type "$upload_content_type";
        upload_set_form_field $upload_field_name.path "$upload_tmp_path";

        # Inform backend about hash and size of a file
        upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
        upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";

        # Here is where you define additional fields to pass through to upload_complete
        upload_pass_form_field "^submit$|^description$";
        upload_pass_form_field "^user$";
        upload_pass_form_field "^password$";
        upload_cleanup 400-599;
    }
}
